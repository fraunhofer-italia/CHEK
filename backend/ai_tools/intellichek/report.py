from operator import itemgetter
from typing import  Tuple
from langchain.chat_models import ChatOpenAI
from langchain.callbacks import get_openai_callback
from langchain.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnableLambda, RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser

def generate_building_permit_report(
    string: str, 
    language: str,
    model: ChatOpenAI
    ) -> Tuple[str, float]:
    """
    Generate a detailed description of a building permit process in the European Union based on the 
    provided BPMN XML string.
    
    The function interacts with a ChatOpenAI model to create a comprehensive report on the process. 
    The conversation history is updated during the chat.

    Args:
        string (str): A portion of the XML from a BPMN file describing a building permit process.
        language (str): The desired language for the generated report.
        model (ChatOpenAI): The ChatOpenAI model instance to generate responses.

    Returns:
        Tuple[str, float]: A tuple containing the generated report and the total cost incurred for the API call.
    """
    
    template_summary = """
    You are an expert BPMN interpreter specializing in building permits within the European Union.

    The user provides you with a segment of an XML from a BPMN file, describing a building permit process: {string}.
    Based on this input, elaborate on the entire process in detail. Use a list and differentiate between the applicants.
    
    The names of tasks and events have the label 'name'.
    The description how these are done have the label 'maturity:user_description'
    
    Do not incorporate the maturity levels
    The following represents the conversation history:
    Conversation History: {history}
    
    Please respond in the following language: {language}
    """
  
    template_report_v2 = """
    You are a expert in building permits and you write official domuments for the municipallity you work for.
    You will receive a list of processes involved in a building permit procedure, 
    outlining events or tasks along with descriptions from the perspective of all applicants.
    give this list back in form of a markdown table and
    utilize this information to compose a comprehensive and very detailed final report for the process (A desription and not a list of things!!). 
    Ensure a highly formal tone and include all relevant details, particularly the procedures 
    and execution of tasks or events. Format the report using Markdown.
    The titel should be: "Final CHEK Report: As-Is Process by IntelliCHEK".
    The subtitles are the first the introduction, the table with tasks and description, in detail the different applicants, and a conclusion.
    This is the building process: {report}
    """
    
    prompt_report = ChatPromptTemplate.from_template(template_report_v2)
    prompt_summary = ChatPromptTemplate.from_messages([
            ("system", template_summary),
            ("human", "{string}"),
        ])

    chain_summary = (
        {
            "string": itemgetter("string"),
            "language": itemgetter("language"),
            "history": itemgetter("history"),
        }
        | prompt_summary
        | model
        | StrOutputParser()
    )

    chain_report = (
        {"report": chain_summary}
        | prompt_report
        | model
        | StrOutputParser()
    )

    with get_openai_callback() as cb:
        response = chain_report.invoke({"string": string, "language": language, "history": 'conversation_log'})
        total_cost = float(cb.total_cost)
    
    return response, total_cost

def generate_maturity_model_report(
    string: str, 
    language: str, 
    model: ChatOpenAI
    ) -> Tuple[str, float]:
    """
    Generate a comprehensive report on the maturity assessment of a building permit process in the European Union.

    The function interacts with a ChatOpenAI model to create a detailed report, updating the conversation history during the chat.

    Args:
        string (str): String describing a maturity evaluation.
        language (str): Desired language for the generated report.
        model (ChatOpenAI): Instance of the ChatOpenAI model for response generation.

    Returns:
        Tuple[str, float]: A tuple containing the generated report and the total cost incurred for the API call.
    """
    
    template_summary = """
    In the assessment of maturity models for building permits, expertise lies in evaluating four critical dimensions:
    Technology, Information, Organization, and Process. Each dimension is appraised on a scale from 0 (completely analogue)
    to 5 (completely digital), accompanied by insightful justifications generated by the AI system IntelliCHEK. 
    The resulting comprehensive evaluation encapsulates the degree of digitization across these key facets, providing a nuanced 
    understanding essential for a government-finalized report on the maturity of building permit processes.
    This is the text: {string}

    Please respond in the following language: {language}
    """
  
    template_report = """
    You are a building permit expert working for the government, writing final reports. Please take the following text and format it as follows:

    - Title: "Final Report: Maturity Assessment by IntelliCHEK"
    - Section with title "Maturity Models with Average Maturity Level"
    - SubSection: Put here the 4 Maturity Models with calculated Average Maturity Level. Put the average in brakets and use the arithmetic mean of each of these four categories.
    - Section: Write a Conclusion
    
    At the end of each of the 4 Maturity Model with calculated average Maturity Level put a §$%PICTURE§$%
    
    Example Schema: 
    
        # Final Report: Maturity Assessment by IntelliCHEK

        ## Maturity Models with Average Maturity Level

        ### Technology (1.0)
        - **Data Management Environment and Network Platform**: Level 1
             - Digital submission and communication exist, but no digital data management process. 
        - **Data Storage/Repository**: Level 1
             -  Documents are stored digitally but lack a centralized system. 
        ...
        §$%PICTURE§$%
        ### Information (1.0)
        ...
        
    Format the report using Markdown. Dont use ```markdown in the beginning!
    
    This is the building process: {report}
    """
    
    prompt_report = ChatPromptTemplate.from_template(template_report)
    prompt_summary = ChatPromptTemplate.from_messages([
            ("system", template_summary),
            ("human", "{string}"),
        ])

    chain_summary = (
        {
            "string": itemgetter("string"),
            "language": itemgetter("language"),
        }
        | prompt_summary
        | model
        | StrOutputParser()
    )

    chain_report = (
        {"report": chain_summary}
        | prompt_report
        | model
        | StrOutputParser()
    )

    with get_openai_callback() as cb:
        response = chain_report.invoke({"string": string, "language": language})
        total_cost = float(cb.total_cost)

    return response, total_cost

def generate_roadmap_report(
    string: str,
    language: str, 
    model: ChatOpenAI
    ) -> Tuple[str, float]:
    """
    Generate a comprehensive report on the roadmap for achieving a benchmark value in the future.

    The function interacts with a ChatOpenAI model to create a detailed report based on the provided roadmap data.

    Args:
        string (str): String describing the roadmap details.
        language (str): Desired language for the generated report.
        model (ChatOpenAI): Instance of the ChatOpenAI model for response generation.

    Returns:
        Tuple[str, float]: A tuple containing the generated report and the total cost incurred for the API call.
    """

    template_summary = """
    You will get some informations about a Roadmap that ensures, that a benchmark value is reached in the future. 
    create a good structured list and do not miss any details! this is the text: {string}
    
    Please respond in the following language: {language}
    """
  
    template_report = """
    You are a building permit expert working for the government, writing final reports. Please take the following text and format it as follows:

    - Title: "Final Report: Roadmap by IntelliCHEK"
    - Markdown Table with the columns: KMA, Start Date, End Date, Dependencies, Actions and CHEK Tools
      (If a field is empty or none AND the start_date and end date are the same write:
      Chek benchmark level reached)
    - Section: Write a Conclusion
    
    Format the report using Markdown. Dont use ```markdown in the beginning!
    This is the building process for the markdown table: {report}
    """
    
    prompt_report = ChatPromptTemplate.from_template(template_report)
    prompt_summary = ChatPromptTemplate.from_messages([
            ("system", template_summary),
            ("human", "{string}"),
        ])

    chain_summary = (
        {
            "string": itemgetter("string"),
            "language": itemgetter("language"),
        }
        | prompt_summary
        | model
        | StrOutputParser()
    )

    chain_report = (
        {"report": chain_summary}
        | prompt_report
        | model
        | StrOutputParser()
    )

    with get_openai_callback() as cb:
        response = chain_report.invoke({"string": string, "language": language})
        total_cost = float(cb.total_cost)

    return response, total_cost
